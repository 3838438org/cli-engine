#!/bin/bash

set -ex

get_script_dir () {
  SOURCE="${BASH_SOURCE[0]}"
  # While $SOURCE is a symlink, resolve it
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$( readlink "$SOURCE" )"
    # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  echo "$DIR"
}
DIR=$(get_script_dir)

VERSION=`$DIR/version`
NODE_VERSION=7.5.0

if [ $# -ne 2 ]; then
  echo "USAGE: $0 PLATFORM CHANNEL"
  exit 1
fi

PLATFORM=$1
CHANNEL=$2
NAME=`node -p "require('./package.json').name"`

# setup workspace
TARBALL_BASE=$NAME-v$VERSION-$PLATFORM
WORKSPACE=tmp/build/$TARBALL_BASE
rm -rf $WORKSPACE
mkdir -p $WORKSPACE/node_modules
mkdir -p $WORKSPACE/bin
if [ -f README.md ]; then cp README.md $WORKSPACE; fi
if [ -f LICENSE ]; then cp LICENSE $WORKSPACE; fi
cp package.json $WORKSPACE
cp yarn.lock $WORKSPACE

# install node
NODE_BASE=node-v$NODE_VERSION-$PLATFORM
if [ ! -f tmp/$NODE_BASE.tar.xz ]; then
  curl -fSLo tmp/$NODE_BASE.tar.xz https://nodejs.org/dist/v$NODE_VERSION/$NODE_BASE.tar.xz
fi
tar -C $WORKSPACE -xf tmp/$NODE_BASE.tar.xz
mv $WORKSPACE/$NODE_BASE $WORKSPACE/node

# install packages
cd $WORKSPACE
yarn install --offline --no-progress --production

echo $VERSION > VERSION
echo $CHANNEL > CHANNEL

# create bin runner
cat << EOF > bin/$NAME
#!/usr/bin/env bash
set -e
get_script_dir () {
  SOURCE="\${BASH_SOURCE[0]}"
  # While \$SOURCE is a symlink, resolve it
  while [ -h "\$SOURCE" ]; do
    DIR="\$( cd -P "\$( dirname "\$SOURCE" )" && pwd )"
    SOURCE="\$( readlink "\$SOURCE" )"
    # If \$SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
    [[ \$SOURCE != /* ]] && SOURCE="\$DIR/\$SOURCE"
  done
  DIR="\$( cd -P "\$( dirname "\$SOURCE" )" && pwd )"
  echo "\$DIR"
}
XDG_DATA_HOME=\${XDG_DATA_HOME:="\$HOME/.local/share"}
if [ -x \$XDG_DATA_HOME/$NAME/jscli/$NAME ]; then
  \$XDG_DATA_HOME/$NAME/jscli/$NAME \$*
else
  DIR=\$(get_script_dir)
  \$DIR/../node/bin/node --harmony-async-await --use_strict \$DIR/$NAME.js \$*
fi
EOF
chmod +x bin/$NAME

cat << EOF > bin/$NAME.js
require('cli-engine')()
EOF

# create tarballs
cd ..
tar c $TARBALL_BASE | xz > $TARBALL_BASE.tar.xz
tar czf $TARBALL_BASE.tar.gz $TARBALL_BASE

SHA256=`shasum -a 256 $TARBALL_BASE.tar.gz | awk {'print \$1'}`
cat << EOF > $PLATFORM
{
  "version": "$VERSION",
  "sha256": "$SHA256"
}
EOF

cd ../..
